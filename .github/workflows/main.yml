name: Nova TV M3U Scraper

on:
  schedule:
    - cron: "0 */2 * * *"  # every 2 hours
  workflow_dispatch:        # manual trigger

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install puppeteer@latest

      - name: Run Puppeteer Script
        run: |
          node <<'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');

          (async () => {
              const browser = await puppeteer.launch({
                  headless: "new",
                  args: [
                      '--no-sandbox',
                      '--disable-setuid-sandbox',
                      '--disable-dev-shm-usage',
                      '--disable-gpu',
                      '--mute-audio'
                  ]
              });

              const page = await browser.newPage();
              await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
              await page.setViewport({ width: 1920, height: 1080 });

              console.log('üåê Loading nova.bg/live...');
              const streamUrls = new Set();

              // Listen for all responses
              page.on('response', async (response) => {
                  const url = response.url();
                  if (url.includes('.m3u8') || url.includes('master.m3u8')) {
                      console.log('‚úÖ Found stream:', url);
                      streamUrls.add(url);
                  }
              });

              try {
                  // Navigate to page and wait for player to load
                  await page.goto('https://nova.bg/live', {
                      waitUntil: 'networkidle2',
                      timeout: 30000
                  });

                  // Wait specifically for the video player to load
                  await page.waitForSelector('video', { timeout: 10000 });

                  // Sometimes you need to interact with the player
                  try {
                      await page.click('.play-button');
                      console.log('‚ñ∂Ô∏è Clicked play button');
                  } catch (e) {
                      console.log('‚ÑπÔ∏è No play button found or already playing');
                  }

                  // Wait for streams to load
                  await new Promise(r => setTimeout(r, 5000));

              } catch (e) {
                  console.log('‚ö†Ô∏è Error during scraping:', e.message);
              }

              // Save results
              const output = Array.from(streamUrls).filter(url => 
                  url.includes('nova') || url.includes('netcom')
              );

              if (output.length > 0) {
                  fs.writeFileSync('m3u_links.txt', output.join('\n'));
                  console.log(`üîó Saved ${output.length} M3U links:`);
                  output.forEach(url => console.log(`- ${url}`));
              } else {
                  fs.writeFileSync('m3u_links.txt', 'No M3U8 URLs found');
                  console.log('‚ùå No M3U8 URLs found');
              }

              await browser.close();
          })();
          EOF

      - name: Upload M3U Links Artifact
        uses: actions/upload-artifact@v4
        with:
          name: m3u-links
          path: m3u_links.txt
