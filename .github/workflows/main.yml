name: Nova TV M3U Scraper (tvmaniabg)

on:
  schedule:
    - cron: "0 */2 * * *"  # every 2 hours
  workflow_dispatch:        # manual trigger

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install puppeteer@latest

      - name: Run Puppeteer Script
        run: |
          node <<'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');

          (async () => {
              const browser = await puppeteer.launch({
                  headless: "new",
                  args: [
                      '--no-sandbox',
                      '--disable-setuid-sandbox',
                      '--disable-dev-shm-usage',
                      '--disable-gpu',
                      '--mute-audio'
                  ]
              });

              const page = await browser.newPage();
              await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
              await page.setViewport({ width: 1920, height: 1080 });

              console.log('üåê Loading tvmaniabg.com/nova-tv/...');
              let streamUrl = null;

              // Intercept all requests
              await page.setRequestInterception(true);
              page.on('request', (request) => {
                  const url = request.url();
                  if (url.includes('ortepe.xyz') && url.includes('chunks.m3u8') && url.includes('novatv')) {
                      console.log('‚úÖ Found stream URL:', url);
                      streamUrl = url;
                      request.abort();  // No need to actually load the stream
                  } else {
                      request.continue();
                  }
              });

              try {
                  // Navigate to page
                  await page.goto('https://tvmaniabg.com/nova-tv/', {
                      waitUntil: 'networkidle2',
                      timeout: 30000
                  });

                  // Wait for player to potentially load
                  await new Promise(r => setTimeout(r, 5000));

                  // Try to click play button if exists
                  const playButtons = [
                      '.play-button',
                      '.vjs-big-play-button',
                      '[aria-label="Play"]',
                      '.plyr__control--overlaid'
                  ];
                  
                  for (const selector of playButtons) {
                      try {
                          await page.click(selector);
                          console.log(`‚ñ∂Ô∏è Clicked play button (${selector})`);
                          await new Promise(r => setTimeout(r, 3000));
                          break;
                      } catch (e) {
                          // Ignore if not found
                      }
                  }

                  // Additional wait for streams
                  await new Promise(r => setTimeout(r, 5000));

              } catch (e) {
                  console.log('‚ö†Ô∏è Error during scraping:', e.message);
              }

              // Save results
              if (streamUrl) {
                  fs.writeFileSync('m3u_links.txt', streamUrl);
                  console.log(`üîó Saved M3U8 URL: ${streamUrl}`);
              } else {
                  fs.writeFileSync('m3u_links.txt', 'No M3U8 URL found');
                  console.log('‚ùå No M3U8 URL found');
              }

              await browser.close();
          })();
          EOF

      - name: Upload M3U Links Artifact
        uses: actions/upload-artifact@v4
        with:
          name: m3u-links
          path: m3u_links.txt
