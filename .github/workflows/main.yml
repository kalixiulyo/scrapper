name: Puppeteer M3U Scraper

on:
  schedule:
    - cron: "*/10 * * * *"  # Runs every 10 minutes
  workflow_dispatch:        # Still allows manual trigger

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3Ô∏è‚É£ Install latest Puppeteer
      - run: npm install puppeteer@latest

      # 4Ô∏è‚É£ Run Puppeteer script
      - name: Run Puppeteer Script
        run: |
          node <<'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');

          (async () => {
              const browser = await puppeteer.launch({
                  headless: "new",
                  args: [
                      '--no-sandbox',
                      '--disable-setuid-sandbox',
                      '--disable-dev-shm-usage',
                      '--disable-gpu'
                  ]
              });

              const page = await browser.newPage();

              await page.setExtraHTTPHeaders({
                  "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                  "Referer": "https://nova.bg/"
              });

              console.log('üåê Loading nova.bg/live...');
              let streamUrls = new Set();

              page.on('response', response => {
                  const url = response.url();
                  if (url.includes('.m3u8')) {
                      console.log('‚úÖ Found:', url);
                      streamUrls.add(url);
                  }
              });

              try {
                  await page.goto('https://tvmaniabg.com/nova-tv', { waitUntil: 'domcontentloaded', timeout: 15000 });
              } catch (e) {
                  console.log("‚ö†Ô∏è Page load timeout:", e.message);
              }

              // ‚úÖ Wait for late .m3u8 requests
              await new Promise(r => setTimeout(r, 3000));

              const output = Array.from(streamUrls);
              const fileContent = output.length > 0 ? output.join('\n') : 'No URLs found';
              fs.writeFileSync('m3u_links.txt', fileContent);

              console.log(`üîó Saved ${output.length} M3U links to m3u_links.txt`);
              await browser.close();
          })();
          EOF

      # 5Ô∏è‚É£ Upload artifact
      - name: Upload M3U Links Artifact
        uses: actions/upload-artifact@v4
        with:
          name: m3u-links
          path: m3u_links.txt



